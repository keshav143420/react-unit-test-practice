{"version":3,"sources":["components/Header.js","components/Button.js","components/Map.js","mapChooser.js","containers/StoreLocator.js","containers/App.js","serviceWorker.js","index.js"],"names":["Header","className","src","alt","Component","Button","onClick","this","props","handleClick","value","location","Map","imagePath","imagename","mapChooser","locationName","StoreLocator","state","currentMap","shops","chooseMap","bind","setState","e","target","storeButtons","map","shop","id","key","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wRAYeA,E,uKARX,OACE,yBAAKC,UAAU,UACb,yBAAKC,IAAI,qCAAqCC,IAAI,qB,GAJrCC,aCQNC,G,6KALX,OACE,4BAAQC,QAASC,KAAKC,MAAMC,YAAaC,MAAOH,KAAKC,MAAMG,SAAUV,UAAU,mBAAoBM,KAAKC,MAAMG,SAAWJ,KAAKC,MAAMG,SAAW,qB,GAHhIP,cCeNQ,G,6KAdX,IAAIC,EAOJ,OALEA,EADCN,KAAKC,MAAMM,UACH,iBAAaP,KAAKC,MAAMM,WAGrB,kBAGZ,yBAAKb,UAAU,UACb,yBAAKC,IAAKW,EAAWV,IAAKI,KAAKC,MAAMG,gB,GAX3BP,cCIHW,MANf,SAAoBC,GAIlB,OAHKA,IACHA,EAAe,QAEX,GAAN,OAAUA,EAAV,SCwDaC,E,kDArDb,WAAYT,GAAQ,IAAD,8BACjB,cAAMA,IACDU,MAAQ,CACXC,WAAY,WACZC,MAAO,IAET,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBANA,E,gEAUjBf,KAAKgB,SAAS,CACZH,MAAO,CACL,CACE,SAAY,WACZ,QAAW,oBAEb,CACE,SAAY,UACZ,QAAW,mBAEb,CACE,SAAY,WACZ,QAAW,oBAEb,CACE,SAAY,GACZ,QAAW,S,gCAMTI,GACRjB,KAAKgB,SAAS,CAAEJ,WAAYJ,EAAWS,EAAEC,OAAOf,W,+BAGxC,IAAD,OAEHgB,EAAenB,KAAKW,MAAME,MAAMO,KAAI,SAACC,EAAMC,GAC7C,OAAQ,kBAAC,EAAD,CAAQpB,YAAa,EAAKY,UAAWS,IAAKD,EAAIlB,SAAUiB,EAAKjB,cAGvE,OAAQ,6BACN,kBAAC,EAAD,MACA,6BACGe,GAEH,kBAAC,EAAD,CAAKZ,UAAWP,KAAKW,MAAMC,WAAYR,SAAUJ,KAAKC,MAAMG,gB,GAhDvCP,aCMZ2B,MARf,WACE,OACE,yBAAK9B,UAAU,OACb,kBAAC,EAAD,QCKc+B,QACW,cAA7BC,OAAOtB,SAASuB,UAEe,UAA7BD,OAAOtB,SAASuB,UAEhBD,OAAOtB,SAASuB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.96364ca9.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Header extends Component {\n  render(){\n    return (\n      <div className=\"Header\">\n        <img src=\"images/wired-brain-coffee-logo.png\" alt=\"Wired Brain\" />\n      </div>\n    )\n  }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport './Button.css';\n\nclass Button extends Component {\n  render() {\n    return (\n      <button onClick={this.props.handleClick} value={this.props.location} className=\"location-button\" >{this.props.location ? this.props.location : 'All locations'}</button>\n    );\n  }\n}\nexport default Button;","import React, { Component } from 'react';\nimport './Map.css';\nclass Map extends Component {\n  render(){\n    let imagePath;\n    if(this.props.imagename){\n      imagePath = `images/${this.props.imagename}`;\n    }\n    else{\n      imagePath = 'images/none.png';\n    }\n    return(\n      <div className=\"MapBox\">\n        <img src={imagePath} alt={this.props.location} />\n      </div>\n    );\n  }\n}\nexport default Map;","function mapChooser(locationName){\n  if (!locationName){\n    locationName = 'none';\n  }\n  return `${locationName}.png`;\n}\nexport default mapChooser;","import React, { Component } from 'react';\nimport Header from '../components/Header';\nimport Button from '../components/Button';\nimport Map from '../components/Map';\nimport mapChooser from '../mapChooser';\n\nclass StoreLocator extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentMap: 'none.png',\n      shops: []\n    };\n    this.chooseMap = this.chooseMap.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      shops: [\n        {\n          \"location\": \"Portland\",\n          \"address\": \"123 Portland Dr.\"\n        },\n        {\n          \"location\": \"Astoria\",\n          \"address\": \"123 Astoria Dr.\"\n        },\n        {\n          \"location\": \"Corvalis\",\n          \"address\": \"123 Corvalis Dr.\"\n        },\n        {\n          \"location\": \"\",\n          \"address\": \"\"\n        }\n      ]\n    })\n  }\n\n  chooseMap(e) {\n    this.setState({ currentMap: mapChooser(e.target.value) });\n  }\n\n  render() {\n\n    let storeButtons = this.state.shops.map((shop, id) => {\n      return (<Button handleClick={this.chooseMap} key={id} location={shop.location} />)\n    });\n\n    return (<div>\n      <Header />\n      <div>\n        {storeButtons}\n      </div>\n      <Map imagename={this.state.currentMap} location={this.props.location} />\n    </div>\n    );\n  }\n}\n\nexport default StoreLocator;","import React from 'react';\nimport '../App.css';\nimport StoreLocator from './StoreLocator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <StoreLocator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}